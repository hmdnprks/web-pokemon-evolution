name: Vercel Preview Deployment
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  NODE_VERSION: '20'
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

on:
  push:
    branches-ignore:
      - main

jobs:
  Deploy-Preview:
    runs-on: ubuntu-latest
    outputs:
      deployment-url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - uses: actions/checkout@v2

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm install

      - name: Run tests with coverage
        run: npm run test:ci

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ env.CODECOV_TOKEN }}

      # Run SonarQube analysis
      - name: Run SonarQube Scanner
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.projectKey=hmdnprks_web-pokemon-evolution
            -Dsonar.organization=hmdnprks
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.login=${{ env.SONAR_TOKEN }}

      # Deploy to Vercel and capture deployment URL
      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          VERCEL_OUTPUT=$(vercel deploy --prebuilt --prod --json --token=$VERCEL_TOKEN)
          DEPLOYMENT_URL=$(echo $VERCEL_OUTPUT | jq -r '.url')
          echo "::set-output name=deployment-url::$DEPLOYMENT_URL"

      - name: Send Success Notification
        if: success()
        run: |
          MESSAGE="✅ Build succeeded for ${{ github.repository }} at ${{ github.sha }}. View deployment: ${{ steps.deploy.outputs.deployment-url }}"
          curl -s -X POST https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage -d chat_id=$TELEGRAM_CHAT_ID -d text="$MESSAGE"

      - name: Send Failure Notification
        if: failure()
        run: |
          MESSAGE="❌ Build failed for ${{ github.repository }} at ${{ github.sha }}"
          curl -s -X POST https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage -d chat_id=$TELEGRAM_CHAT_ID -d text="$MESSAGE"
